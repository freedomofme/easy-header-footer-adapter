import org.gradle.internal.jvm.Jvm

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

group = 'com.github.rubengees'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.version
    }
}

dependencies {
    api deps.supportRecyclerView
    api deps.supportAnnotations
}

task androidJavadocs(type: Javadoc, dependsOn: 'assembleRelease') {
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompile.classpath
        }
    }
    source = android.sourceSets.main.java.srcDirs
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task javadoc(type: Javadoc) {
    failOnError false

    source = android.sourceSets.main.java.sourceFiles
    classpath = files(android.bootClasspath)

    android.libraryVariants.all { variant ->
        classpath += variant.javaCompiler.classpath
    }

    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.links("http://docs.oracle.com/javase/${Jvm.current().javaVersion.majorVersion ?: '7'}/docs/api/")
    options.linksOffline("http://d.android.com/reference/", "${android.getSdkDirectory()}/docs/reference")
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.getDestinationDir()
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact bundleRelease

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.compile.allDependencies.each {
                    if (it.group != null && (it.name != null || it.name == "unspecified") && it.version != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')

                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}
